---
  - fail: msg="This role requires the following vars to be defined. openshift_hosted_logging_master_public_url, openshift_hosted_logging_hostname, openshift_hosted_logging_elasticsearch_cluster_size"
    when: "openshift_hosted_logging_hostname is not defined or
          openshift_hosted_logging_elasticsearch_cluster_size is not defined or
          openshift_hosted_logging_master_public_url is not defined"

  - name: "[custom] Create template directory"
    file: path={{ item }} state=directory
    with_items:
      - "/usr/share/openshift/examples/infrastructure-templates/enterprise/"

  - name: "[custom] Copy deployer template"
    copy:
      dest: "/usr/share/openshift/examples/infrastructure-templates/enterprise/logging-deployer.yaml"
      src: "logging-deployer.yaml"

  - name: "[custom] delete logging project if already exists"
    command: oc delete project logging

  - name: Create temp directory for kubeconfig
    command: mktemp -d /tmp/openshift-ansible-XXXXXX
    register: mktemp
    changed_when: False

  - name: Copy the admin client config(s)
    command: >
      cp {{ openshift_master_config_dir }}/admin.kubeconfig {{ mktemp.stdout }}/admin.kubeconfig
    changed_when: False

  - name: "Create logging project"
    command: >
      {{ openshift.common.admin_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig new-project logging

  - name: "Changing projects"
    command: >
      {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig project logging

  - name: "Creating logging deployer secret"
    command: >
      {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig secrets new logging-deployer {{ openshift_hosted_logging_secret_vars | default('nothing=/dev/null') }}
    register: secret_output
    failed_when: "secret_output.rc == 1 and 'exists' not in secret_output.stderr"

  - name: "Copy serviceAccount file"
    copy:
      dest: /tmp/logging-deployer-sa.yaml
      src: "{{role_path}}/files/logging-deployer-sa.yaml"
      force: yes

  - name: "Create logging-deployer service account"
    command: >
      {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig create -f  /tmp/logging-deployer-sa.yaml
    register: deployer_output
    failed_when: "deployer_output.rc == 1 and 'exists' not in deployer_output.stderr"

  - name: "Set permissions for logging-deployer service account"
    command: >
      {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig policy add-role-to-user edit system:serviceaccount:logging:logging-deployer
    register: permiss_output
    failed_when: "permiss_output.rc == 1 and 'exists' not in permiss_output.stderr"

  - name: "Set permissions for fluentd"
    command: >
      {{ openshift.common.admin_binary}} policy add-scc-to-user privileged system:serviceaccount:logging:aggregated-logging-fluentd
    register: fluentd_output
    failed_when: "fluentd_output.rc == 1 and 'exists' not in fluentd_output.stderr"

  - name: "Set additional permissions for fluentd"
    command: >
      {{ openshift.common.admin_binary}} policy add-cluster-role-to-user cluster-reader system:serviceaccount:logging:aggregated-logging-fluentd
    register: fluentd2_output
    failed_when: "fluentd2_output.rc == 1 and 'exists' not in fluentd2_output.stderr"

  - name: "Create deployer template"
    command: >
      {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig create -f /usr/share/openshift/examples/infrastructure-templates/enterprise/logging-deployer.yaml -n openshift
    register: template_output
    failed_when: "template_output.rc == 1 and 'exists' not in template_output.stderr"

  - name: "Process the deployer template"
    shell:  "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig process logging-deployer-template -n openshift -v {{ oc_process_values }} |  {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig create -f -"

  - name: "Wait for image pull and deployer pod"
    shell:  "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig get pods | grep logging-deployer.*Completed"
    register: result
    until: result.rc == 0
    retries: 15
    delay: 10

  - name: "Process support template"
    shell:  "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig process logging-support-template |  {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig create -f -"

  - name: "Set insecured registry"
    command:  "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig annotate is --all  openshift.io/image.insecureRepository=true --overwrite"
    when: "target_registry is defined and insecure_registry == 'true'"

  - name: "Wait for imagestreams to become available"
    shell:  "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig get is | grep logging-fluentd"
    register: result
    until: result.rc == 0
    failed_when: result.rc == 1 and 'not found' not in result.stderr
    retries: 20
    delay: 10

  - name: "Wait for replication controllers to become available"
    shell:  "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig get rc | grep logging-fluentd-1"
    register: result
    until: result.rc == 0
    failed_when: result.rc == 1 and 'not found' not in result.stderr
    retries: 20
    delay: 10


  - name: "Scale fluentd deployment config"
    command: >
      {{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig scale dc/logging-fluentd --replicas={{ openshift_hosted_logging_fluentd_replicas | default('1') }}

  # - debug:
  #     msg: "Logging components deployed. Note persistant volume for elasticsearch must be setup manually"

  - name: "[custom] Create teplates for NFS volumes"
    template: src={{ item }} dest=/tmp/{{ item }}
    with_items:
      - "nfs-pv0001.yaml"
      - "nfs-pv_claim.yaml"
    when: (custom_nfs_deploy | default('false') | bool )

  - name: "[custom] Add permission to mount nfs storage"
    shell: oadm policy add-scc-to-user privileged system:serviceaccount:logging:aggregated-logging-elasticsearch
    when: (custom_nfs_deploy | default('false') | bool )

  - name: "[custom] Creating NFS persistent volume"
    shell: oc project logging && oc create -f /tmp/nfs-pv0001.yaml
    when: (custom_nfs_deploy | default('false') | bool )

  - name: "[custom] Creating NFS persistent volume claim"
    shell: oc project logging && oc create -f /tmp/nfs-pv_claim.yaml
    when: (custom_nfs_deploy | default('false') | bool )

  - name: "[custom] Put editor script on host"
    copy: src="dc-editor.py" dest="/tmp/dc-editor.py" mode=755
    when: (custom_nfs_deploy | default('false') | bool )

  - name: "[custom] Export deployer config"
    shell: oc get -o json dc  $(oc get dc | egrep -o 'logging-es-\w*') > /tmp/dc-es.json
    when: (custom_nfs_deploy | default('false') | bool )

  - name: "[custom] Edit config"
    shell: python /tmp/dc-editor.py
    when: ( custom_nfs_deploy | default(false) | bool )

  - name: "[custom] Import deployer config"
    shell: oc replace dc  $(oc get dc | egrep -o 'logging-es-\w*') -f /tmp/dc-es.json
    when: (custom_nfs_deploy | default('false') | bool )

  - name: Delete temp directory
    file:
      name: "{{ mktemp.stdout }}"
      state: absent
    changed_when: False
